"""0003_party_code_registration

Revision ID: 4ee06cbac24b
Revises: 5c1f6bb801a8
Create Date: 2025-06-30 11:31:38.041917

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence  # Added manually.

# revision identifiers, used by Alembic.
revision = '4ee06cbac24b'
down_revision = '5c1f6bb801a8'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # ### Manually create sequences and add them to pk columns. ###
    op.execute(CreateSequence(Sequence('client_code_registration_id_seq', start=1, increment=1)))
    
    client_code_type = op.create_table('client_code_types',
    sa.Column('client_code_type', postgresql.ENUM('CREATE_CODE', 'CHANGE_ADDRESS', 'CHANGE_NAME', 'CHANGE_NAME_ADDRESS', name='client_code_type'), nullable=False),
    sa.Column('client_code_type_desc', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('client_code_type')
    )
    op.create_table('client_code_registrations',
    sa.Column('id', sa.Integer(),sa.Sequence('client_code_registration_id_seq'), nullable=False),
    sa.Column('create_ts', sa.DateTime(), nullable=False),
    sa.Column('request_data', sa.JSON(), nullable=False),
    sa.Column('pay_invoice_id', sa.Integer(), nullable=True),
    sa.Column('pay_path', sa.String(length=256), nullable=True),
    sa.Column('user_id', sa.String(length=1000), nullable=True),
    sa.Column('previous_registration_id', sa.Integer(), nullable=True),
    sa.Column('client_code_type', postgresql.ENUM('CREATE_CODE', 'CHANGE_ADDRESS', 'CHANGE_NAME', 'CHANGE_NAME_ADDRESS', name='client_code_type'), nullable=False),
    sa.ForeignKeyConstraint(['client_code_type'], ['client_code_types.client_code_type'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('client_code_registrations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_client_code_registrations_create_ts'), ['create_ts'], unique=False)

    with op.batch_alter_table('client_codes', schema=None) as batch_op:
        batch_op.add_column(sa.Column('client_code_registration_id', sa.Integer(), nullable=True))
        batch_op.create_index(batch_op.f('ix_client_codes_client_code_registration_id'), ['client_code_registration_id'], unique=False)
        batch_op.create_foreign_key(None, 'client_code_registrations', ['client_code_registration_id'], ['id'])

    # ### Manually add type table data ###
    op.bulk_insert(client_code_type,
      [
        { 'client_code_type': 'CREATE_CODE', 'client_code_type_desc': 'Create new client party code.' },
        { 'client_code_type': 'CHANGE_ADDRESS', 'client_code_type_desc': 'Change the address for a client party code.' },
        { 'client_code_type': 'CHANGE_NAME', 'client_code_type_desc': 'Change the business name for a client party code.' },
        { 'client_code_type': 'CHANGE_NAME_ADDRESS', 'client_code_type_desc': 'Change the business name and address for a client party code.' }
      ]
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    with op.batch_alter_table('client_codes', schema=None) as batch_op:
        batch_op.drop_constraint(None, type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_client_codes_client_code_registration_id'))
        batch_op.drop_column('client_code_registration_id')

    with op.batch_alter_table('client_code_registrations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_client_code_registrations_create_ts'))

    op.drop_table('client_code_registrations')
    op.drop_table('client_code_types')

    # Manually added drop sequence commands ###
    op.execute(DropSequence(Sequence('client_code_registration_id_seq')))
    # ### end Alembic commands ###
