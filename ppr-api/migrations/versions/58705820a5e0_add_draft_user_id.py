"""Add draft user_id.

Revision ID: 58705820a5e0
Revises: 7bbc92e08b92
Create Date: 2021-07-22 11:23:55.671304

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = '58705820a5e0'
down_revision = '7bbc92e08b92'
branch_labels = None
depends_on = None

# 1. Add column drafts.user_id
# 2. Update db function match_individual_name to use an index on all columns
# 3. Add table previous_financing_statements to hold legacy data (requested by Bob).
def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('drafts', sa.Column('user_id', sa.String(length=1000), nullable=True))

    public_match_individual_name = PGFunction(
        schema="public",
        signature="match_individual_name(lastname IN VARCHAR, firstname IN VARCHAR)",
        definition="RETURNS int[]\n    LANGUAGE plpgsql\n    AS\n    $$\n    DECLARE\n        v_ids  integer ARRAY;\n    BEGIN\n        SET pg_trgm.word_similarity_threshold = 0.4;\n        \n        SELECT array_agg(p.id)\n        INTO v_ids\n        FROM parties p\n        WHERE p.registration_id_end IS NULL\n        AND p.party_type = 'DI'\n        AND lastname <% p.last_name_key\n        AND ((firstname <% p.first_name_key AND word_similarity(firstname, p.first_name_key) >= .50) OR\n                (firstname <% p.middle_initial AND word_similarity(firstname, p.middle_initial) >= .50) OR\n                p.first_name_key IN (SELECT n.name \n                                    FROM nicknames n \n                                    WHERE n.name_id IN (SELECT n2.name_id\n                                                            FROM nicknames n2\n                                                        WHERE n2.name = firstname)));                                              \n        RETURN v_ids;\n    END\n    ; \n    $$"
    )
    op.replace_entity(public_match_individual_name)

    op.create_table('previous_financing_statements',
    sa.Column('financing_id', sa.Integer(), nullable=False),
    sa.Column('registration_type', sa.String(length=30), nullable=False),
    sa.Column('cb_date', sa.DateTime(), nullable=True),
    sa.Column('cb_number', sa.String(length=10), nullable=True),
    sa.Column('cr_date', sa.DateTime(), nullable=True),
    sa.Column('cr_number', sa.String(length=10), nullable=True),
    sa.Column('mhr_date', sa.DateTime(), nullable=True),
    sa.Column('mhr_number', sa.String(length=10), nullable=True),
    sa.ForeignKeyConstraint(['financing_id'], ['financing_statements.id'], ),
    sa.PrimaryKeyConstraint('financing_id')
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('drafts', 'user_id')

    public_match_individual_name = PGFunction(
        schema="public",
        signature="match_individual_name(lastname character varying, firstname character varying)",
        definition="returns integer[]\n LANGUAGE plpgsql\nAS $function$\n    DECLARE\n        v_ids  integer ARRAY;\n    BEGIN\n        -- SET pg_trgm.word_similarity_threshold = 0.8;\n        -- SET pg_trgm.similarity_threshold = 0.8;\n        \n        SELECT array_agg(p.id)\n        INTO v_ids\n        FROM parties p\n        WHERE p.registration_id_end IS NULL\n        AND p.party_type = 'DI'\n        AND lastname <% p.last_name_key\n        AND word_similarity(lastname, p.last_name_key) >= .40\n        AND ((firstname <% p.first_name_key AND word_similarity(firstname, p.first_name_key) >= .50) OR\n                (firstname <% p.middle_initial AND word_similarity(firstname, p.middle_initial) >= .50) OR\n                p.first_name_key IN (SELECT n.name \n                                    FROM nicknames n \n                                    WHERE n.name_id IN (SELECT n2.name_id\n                                                            FROM nicknames n2\n                                                        WHERE n2.name = firstname)));                                              \n        RETURN v_ids;\n    END\n    ; \n    $function$"
    )
    op.replace_entity(public_match_individual_name)

    op.drop_table('previous_financing_statements')

    # ### end Alembic commands ###
