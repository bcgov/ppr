"""Add indexes, party email, search userid, update debtor search.

Revision ID: 7bbc92e08b92
Revises: ca3675d682cc
Create Date: 2021-07-14 16:22:28.669873

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text

# revision identifiers, used by Alembic.
revision = '7bbc92e08b92'
down_revision = 'ca3675d682cc'
branch_labels = None
depends_on = None


#
# Add parties.email_address as a PPR UI requirement.
# Add search_requests.user_id as an audit requirement.
# Update business debtor search and individual debtor search to improve performance:
# switch to trigram algorithm https://www.postgresql.org/docs/11/pgtrgm.html
# Search add index parties.middle_initial
# Add indexes on all foreign keys (explicitly required) to improve performance.
def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('ix_client_codes_address_id'), 'client_codes', ['address_id'], unique=False)
    op.create_index(op.f('ix_client_codes_users_id'), 'client_codes', ['users_id'], unique=False)
    op.create_index(op.f('ix_client_codes_historical_address_id'), 'client_codes_historical', ['address_id'], unique=False)
    op.create_index(op.f('ix_client_codes_historical_branch_id'), 'client_codes_historical', ['branch_id'], unique=False)
    op.create_index(op.f('ix_client_codes_historical_users_id'), 'client_codes_historical', ['users_id'], unique=False)
    op.create_index(op.f('ix_court_orders_registration_id'), 'court_orders', ['registration_id'], unique=False)
    op.create_index(op.f('ix_general_collateral_financing_id'), 'general_collateral', ['financing_id'], unique=False)
    op.create_index(op.f('ix_general_collateral_registration_id'), 'general_collateral', ['registration_id'], unique=False)
    op.create_index(op.f('ix_general_collateral_registration_id_end'), 'general_collateral', ['registration_id_end'], unique=False)
    op.add_column('parties', sa.Column('email_address', sa.String(length=250), nullable=True))
    op.create_index(op.f('ix_parties_address_id'), 'parties', ['address_id'], unique=False)
    op.create_index(op.f('ix_parties_branch_id'), 'parties', ['branch_id'], unique=False)
    op.create_index(op.f('ix_parties_financing_id'), 'parties', ['financing_id'], unique=False)
    op.create_index(op.f('ix_parties_middle_initial'), 'parties', ['middle_initial'], unique=False)
    op.create_index(op.f('ix_parties_registration_id'), 'parties', ['registration_id'], unique=False)
    op.create_index(op.f('ix_parties_registration_id_end'), 'parties', ['registration_id_end'], unique=False)
    op.create_index(op.f('ix_registrations_draft_id'), 'registrations', ['draft_id'], unique=False)
    op.create_index(op.f('ix_registrations_financing_id'), 'registrations', ['financing_id'], unique=False)
    op.add_column('search_requests', sa.Column('user_id', sa.String(length=1000), nullable=True))
    op.create_index(op.f('ix_serial_collateral_financing_id'), 'serial_collateral', ['financing_id'], unique=False)
    op.create_index(op.f('ix_serial_collateral_mhr_number'), 'serial_collateral', ['mhr_number'], unique=False)
    op.create_index(op.f('ix_serial_collateral_registration_id'), 'serial_collateral', ['registration_id'], unique=False)
    op.create_index(op.f('ix_serial_collateral_registration_id_end'), 'serial_collateral', ['registration_id_end'], unique=False)
    op.create_index(op.f('ix_trust_indentures_financing_id'), 'trust_indentures', ['financing_id'], unique=False)
    op.create_index(op.f('ix_trust_indentures_registration_id'), 'trust_indentures', ['registration_id'], unique=False)
    op.create_index(op.f('ix_trust_indentures_registration_id_end'), 'trust_indentures', ['registration_id_end'], unique=False)
    public_match_individual_name = PGFunction(
        schema="public",
        signature="match_individual_name(lastname IN VARCHAR, firstname IN VARCHAR)",
        definition="RETURNS int[]\n    LANGUAGE plpgsql\n    AS\n    $$\n    DECLARE\n        v_ids  integer ARRAY;\n    BEGIN\n        -- SET pg_trgm.word_similarity_threshold = 0.8;\n        -- SET pg_trgm.similarity_threshold = 0.8;\n        \n        SELECT array_agg(p.id)\n        INTO v_ids\n        FROM parties p\n        WHERE p.registration_id_end IS NULL\n        AND p.party_type = 'DI'\n        AND lastname <% p.last_name_key\n        AND word_similarity(lastname, p.last_name_key) >= .40\n        AND ((firstname <% p.first_name_key AND word_similarity(firstname, p.first_name_key) >= .50) OR\n                (firstname <% p.middle_initial AND word_similarity(firstname, p.middle_initial) >= .50) OR\n                p.first_name_key IN (SELECT n.name \n                                    FROM nicknames n \n                                    WHERE n.name_id IN (SELECT n2.name_id\n                                                            FROM nicknames n2\n                                                        WHERE n2.name = firstname)));                                              \n        RETURN v_ids;\n    END\n    ; \n    $$"
    )
    op.replace_entity(public_match_individual_name)

    public_searchkey_business_name = PGFunction(
        schema="public",
        signature="searchkey_business_name(actual_name IN VARCHAR)",
        definition="RETURNS VARCHAR\n    LANGUAGE plpgsql\n    AS\n    $$\n    DECLARE\n    v_search_key VARCHAR(150);\n    BEGIN\n        v_search_key :=\n        regexp_replace(\n        regexp_replace(\n        regexp_replace(\n            regexp_replace(\n            regexp_replace(\n            regexp_replace(\n            regexp_replace(\n                regexp_replace(\n                regexp_replace(\n                regexp_replace(\n                regexp_replace(\n                    regexp_replace(\n                    regexp_replace(\n                    regexp_replace(\n                    regexp_replace(\n                        regexp_replace(actual_name, '[[\\:<\\:]](BC|B C |B.C)[[\\:>\\:]]', ' ', 'gi'\n                                    ),\n                                    '[[\\:<\\:]](BRITISH COLUMBIA|BRITISHCOLUMBIA)[[\\:>\\:]]', ' ', 'gi'\n                                    ),\n                                    '[[\\:<\\:]](INCORPORATED|INCORPOREE)[[\\:>\\:]]', ' ', 'gi'\n                                    ),\n                                    '[[\\:<\\:]](CORPORATION)[[\\:>\\:]]', ' ', 'gi'\n                                ),\n                                '[[\\:<\\:]](ULC|HOLDINGS|HOLDING|ASSOCIATION|ASSOCIATES| ASSOC| ASSN|NON PERSONAL LIABILITY|UNLIMITED LIABILITY COMPANY|N P L|NPL|PARTNERSHIP|SOCIETY)[[\\:>\\:]]', ' ', 'gi'\n                                ),\n                                '[[\\:<\\:]](^THE|AND)[[\\:>\\:]]', ' ', 'gi'\n                                ),\n                                '[[\\:<\\:]](^DR)[[\\:>\\:]]', ' ', 'gi'\n                                ),\n                                '[[\\:<\\:]](CONSTRUCTION|CONTRACTING|CONTRACTOR)[[\\:>\\:]]', ' ', 'gi'\n                            ),\n                            '[[\\:<\\:]](CONSULTANTS|CONSULTANT|CONSULTING)[[\\:>\\:]]', ' ', 'gi'\n                            ),\n                            '[[\\:<\\:]](SERVICES|SERVICE)[[\\:>\\:]]', ' ', 'gi'\n                            ),\n                            '[[\\:<\\:]](TRUST)[[\\:>\\:]]', ' ', 'gi'\n                            ),\n                            '[[\\:<\\:]](CORP|COMPANY|CO\\|LTD|LIMITED|LIMITEE|LTEE)[[\\:>\\:]]', ' ', 'gi'\n                        ),\n                        '[[\\:<\\:]](LTD|LIMITED|LIMITEE|LTEE)[[\\:>\\:]]', ' ', 'gi'\n                        ),\n                        '[[\\:<\\:]](CO|INC)[[\\:>\\:]]', ' ', 'gi'\n                        ),\n                        '[^a-zA-Z0-9]+', '', 'gi'\n                        ),\n                        '( ){2,}', '');    \n    RETURN TRIM(v_search_key);\n    END\n    ; \n    $$"
    )
    op.replace_entity(public_searchkey_business_name)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_searchkey_business_name = PGFunction(
        schema="public",
        signature="searchkey_business_name(actual_name character varying)",
        definition="returns character varying\n LANGUAGE plpgsql\nAS $function$\n  DECLARE\n   v_search_key VARCHAR(150);\n  BEGIN\n    v_search_key :=\n       REGEXP_REPLACE(\n        REGEXP_REPLACE(\n         REGEXP_REPLACE(\n          REGEXP_REPLACE(\n           REGEXP_REPLACE(\n            REGEXP_REPLACE(\n             REGEXP_REPLACE(\n              REGEXP_REPLACE(\n               REGEXP_REPLACE(\n                REGEXP_REPLACE(\n                 REGEXP_REPLACE(\n                  REGEXP_REPLACE(\n                   REGEXP_REPLACE(\n                    REGEXP_REPLACE(\n                     REGEXP_REPLACE(\n                      REGEXP_REPLACE(\n                       REGEXP_REPLACE(\n                        REGEXP_REPLACE(\n                         REGEXP_REPLACE(\n                          REGEXP_REPLACE(\n                           REGEXP_REPLACE(\n                            REGEXP_REPLACE(\n                             REGEXP_REPLACE(\n                              REGEXP_REPLACE(\n                               REGEXP_REPLACE(\n                                REGEXP_REPLACE(actual_name,'^0000|^000|^00|^0|^THE | THE |\\([^()]*\\)',''),\n                                'CORPORATION|CORP|COMPANY|CO\\.|LTD|INCORPORATED|INC$|INC.|INCORPOREE|LIMITED|LIMITEE|LTEE|LTD|ASSOCIATION$|ASSOC$|ASSN$|NON PERSONAL LIABILITY$|UNLIMITED LIABILITY COMPANY|N P L$|NPL$|PARTNERSHIP|SOCIETY$|SOC$',''),\n                               'BRITISH COLUMBIA|BRITISHCOLUMBIA','BC'),\n                              '&','AND'),\n                             '#','NUMBER'),\n                            '1','ONE'),\n                           '2','TWO'),\n                          '3','THREE'),\n                         '4','FOUR'),\n                        '5','FIVE'),\n                       '6','SIX'),\n                      '7','SEVEN'),\n                     '8','EIGHT'),\n                    '9','NINE'),\n                   '0','ZERO'),\n                  'TEN','ONEZERO'),\n                 'TWENTY','TWOZERO'),\n                'THIRTY','THREEERO'),\n               'FORTY','FOURZERO'),\n              'FOURTY','FOURZERO'),\n             'FIFTY','FIVEZERO'),\n            'SIXTY','SIXZERO'),\n           'SEVENTY','SEVENZERO'),\n          'EIGHTY','EIGHTZERO'),\n         'NINETY','NINEZERO'),\n        '[^0-9A-Za-z]','','gi');\n    RETURN v_search_key;\n  END\n; \n$function$"
    )
    op.replace_entity(public_searchkey_business_name)
    public_match_individual_name = PGFunction(
        schema="public",
        signature="match_individual_name(lastname character varying, firstname character varying)",
        definition="returns integer[]\n LANGUAGE plpgsql\nAS $function$\n  DECLARE\n    v_ids  integer ARRAY;\n    v_lastname_key VARCHAR(50);\n    v_last1 VARCHAR(50);\n    v_last2 VARCHAR(50);\n    v_firstname_key VARCHAR(50);\n    v_first1 VARCHAR(50);\n    v_first2 VARCHAR(50);\n    v_first3 VARCHAR(50);\n  BEGIN\n    v_lastname_key := searchkey_last_name(lastname);\n    v_last1 = split_part(v_lastname_key, ' ', 1);\n    v_last2 = split_part(v_lastname_key, ' ', 2);  -- May be null\n    v_firstname_key := searchkey_first_name(firstname);\n    v_first1 = split_part(v_firstname_key, ' ', 1);\n    v_first2 = split_part(v_firstname_key, ' ', 2);  -- May be null\n    v_first3 = split_part(v_firstname_key, ' ', 3);  -- May be null\n\n    IF (LENGTH(v_last2) < 1) THEN\n      v_last2 := null;\n    END IF;\n    IF (LENGTH(v_first2) < 1) THEN\n      v_first2 := null;\n    END IF;\n    IF (LENGTH(v_first3) < 1) THEN\n      v_first3 := null;\n    END IF;\n    SET pg_trgm.similarity_threshold = 0.8;\n\n    -- Replace where clause\\: Oracle uses UTL_MATCH.JARO_WINKLER_SIMILARITY\n    SELECT array_agg(id)\n      INTO v_ids\n      FROM parties p\n     WHERE registration_id_end IS NULL AND\n           party_type = 'DI' AND\n           (\n            (p.last_name_key % v_lastname_key OR\n             ((p.last_name_key1 = v_last1 OR (v_last2 IS NOT NULL AND v_last2 = p.last_name_key1)) OR\n              (p.last_name_key2 IS NOT NULL AND (p.last_name_key2 = v_last1 OR (v_last2 IS NOT NULL AND v_last2 = p.last_name_key2)))\n             )\n            ) AND\n             (\n              p.first_name_key % v_firstname_key OR\n              (p.first_name_key1 = v_first1 OR\n               (v_first2 IS NOT NULL AND v_first2 = p.first_name_key1) OR\n               (v_first3 IS NOT NULL AND v_first3 = p.first_name_key1)) OR\n             (p.first_name_key2 IS NOT NULL AND \n              (p.first_name_key2 = v_first1 OR \n               (v_first2 IS NOT NULL AND v_first2 = p.first_name_key2) OR\n               (v_first3 IS NOT NULL AND v_first3 = p.first_name_key2))) OR\n             (p.first_name_key3 IS NOT NULL AND \n              (p.first_name_key3 = v_first1 OR \n               (v_first2 IS NOT NULL AND v_first2 = p.first_name_key3) OR\n               (v_first3 IS NOT NULL AND v_first3 = p.first_name_key3))) OR\n               (searchkey_nickname_match2(p.first_name_key1, p.first_name_key2, p.first_name_key3, v_first1, v_first2, v_first3) > 0)\n             )\n           );\n    RETURN v_ids;\n  END\n; \n$function$"
    )
    op.replace_entity(public_match_individual_name)
    op.drop_index(op.f('ix_trust_indentures_registration_id_end'), table_name='trust_indentures')
    op.drop_index(op.f('ix_trust_indentures_registration_id'), table_name='trust_indentures')
    op.drop_index(op.f('ix_trust_indentures_financing_id'), table_name='trust_indentures')
    op.drop_index(op.f('ix_serial_collateral_registration_id_end'), table_name='serial_collateral')
    op.drop_index(op.f('ix_serial_collateral_registration_id'), table_name='serial_collateral')
    op.drop_index(op.f('ix_serial_collateral_mhr_number'), table_name='serial_collateral')
    op.drop_index(op.f('ix_serial_collateral_financing_id'), table_name='serial_collateral')
    op.drop_column('search_requests', 'user_id')
    op.drop_index(op.f('ix_registrations_financing_id'), table_name='registrations')
    op.drop_index(op.f('ix_registrations_draft_id'), table_name='registrations')
    op.drop_index(op.f('ix_parties_registration_id_end'), table_name='parties')
    op.drop_index(op.f('ix_parties_registration_id'), table_name='parties')
    op.drop_index(op.f('ix_parties_middle_initial'), table_name='parties')
    op.drop_index(op.f('ix_parties_financing_id'), table_name='parties')
    op.drop_index(op.f('ix_parties_branch_id'), table_name='parties')
    op.drop_index(op.f('ix_parties_address_id'), table_name='parties')
    op.drop_column('parties', 'email_address')
    op.drop_index(op.f('ix_general_collateral_registration_id_end'), table_name='general_collateral')
    op.drop_index(op.f('ix_general_collateral_registration_id'), table_name='general_collateral')
    op.drop_index(op.f('ix_general_collateral_financing_id'), table_name='general_collateral')
    op.drop_index(op.f('ix_court_orders_registration_id'), table_name='court_orders')
    op.drop_index(op.f('ix_client_codes_historical_users_id'), table_name='client_codes_historical')
    op.drop_index(op.f('ix_client_codes_historical_branch_id'), table_name='client_codes_historical')
    op.drop_index(op.f('ix_client_codes_historical_address_id'), table_name='client_codes_historical')
    op.drop_index(op.f('ix_client_codes_users_id'), table_name='client_codes')
    op.drop_index(op.f('ix_client_codes_address_id'), table_name='client_codes')
    # ### end Alembic commands ###
