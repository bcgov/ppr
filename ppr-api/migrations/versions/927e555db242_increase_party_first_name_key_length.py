"""Increase party.first_name_key length.

Revision ID: 927e555db242
Revises: f27b7c10458f
Create Date: 2022-03-07 12:13:52.120132

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from alembic_utils.pg_view import PGView
from sqlalchemy import text as sql_text
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '927e555db242'
down_revision = 'f27b7c10458f'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('parties', 'first_name_key',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=100),
               existing_nullable=True)
    public_searchkey_individual = PGFunction(
        schema="public",
        signature="searchkey_individual(last_name character varying, first_name character varying)",
        definition="RETURNS character varying\n    LANGUAGE plpgsql\n    AS $function$\nDECLARE\n        v_ind_key VARCHAR(100);\n\t\tv_last_name VARCHAR(50);\n\t\tv_first_name VARCHAR(50);\n    BEGIN\n\t    -- Remove special characters last name\n        v_last_name := regexp_replace(LAST_NAME,'[^\\w]+',' ','gi');\n        -- Remove prefixes suffixes last name\n\t\tv_last_name := regexp_replace(v_last_name,'\\y(DR|MR|MRS|MS|CH|DE|DO|DA|LE|LA|MA|JR|SR|I|II|III)\\y','','gi');\n\t\t-- Remove extra spaces\n\t\tv_last_name := trim(regexp_replace(v_last_name, '\\s+', ' ', 'gi'));\n\t\t-- Remove repeating letters\n\t\tv_last_name := regexp_replace(v_last_name, '(.)\x01{1,}', '\x01', 'g');\n\t\t-- Remove special characters first name\n        v_first_name := regexp_replace(first_name,'[^\\w]+',' ','gi');\n        -- Remove prefixes first name\n\t\tv_first_name := regexp_replace(v_first_name,'\\y(DR|MR|MRS|MS|CH|DE|DO|DA|LE|LA|MA|JR|SR|I|II|III)\\y','','gi');\n\t\t-- Remove extra spaces\n\t\tv_first_name := trim(regexp_replace(v_first_name, '\\s+', ' ', 'gi'));\n\t\t-- Remove repeating letters\n\t\tv_first_name := regexp_replace(v_first_name, '(.)\x01{1,}', '\x01', 'g');\n\n\t\t-- join last first name\n\t\tv_ind_key := v_last_name||' '||v_first_name;\n\n     RETURN UPPER(v_ind_key);\n    END\n    ; \n    $function$"
    )
    op.replace_entity(public_searchkey_individual)

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_searchkey_individual = PGFunction(
        schema="public",
        signature="searchkey_individual(last_name character varying, first_name character varying)",
        definition="returns character varying\n LANGUAGE plpgsql\nAS $function$\nDECLARE\n        v_ind_key VARCHAR(120);\n\t\tv_last_name VARCHAR(60);\n\t\tv_first_name VARCHAR(60);\n    BEGIN\n\t    -- Remove special characters last name\n        v_last_name := regexp_replace(LAST_NAME,'[^\\w]+',' ','gi');\n        -- Remove prefixes suffixes last name\n\t\tv_last_name := regexp_replace(v_last_name,'\\y(DR|MR|MRS|MS|CH|DE|DO|DA|LE|LA|MA|JR|SR|I|II|III)\\y','','gi');\n\t\t-- Remove extra spaces\n\t\tv_last_name := trim(regexp_replace(v_last_name, '\\s+', ' ', 'gi'));\n\t\t-- Remove repeating letters\n\t\tv_last_name := regexp_replace(v_last_name, '(.)\\1{1,}', '\\1', 'g');\n\t\t-- Remove special characters first name\n        v_first_name := regexp_replace(first_name,'[^\\w]+',' ','gi');\n        -- Remove prefixes first name\n\t\tv_first_name := regexp_replace(v_first_name,'\\y(DR|MR|MRS|MS|CH|DE|DO|DA|LE|LA|MA|JR|SR|I|II|III)\\y','','gi');\n\t\t-- Remove extra spaces\n\t\tv_first_name := trim(regexp_replace(v_first_name, '\\s+', ' ', 'gi'));\n\t\t-- Remove repeating letters\n\t\tv_first_name := regexp_replace(v_first_name, '(.)\\1{1,}', '\\1', 'g');\n\n\t\t-- join last first name\n\t\tv_ind_key := v_last_name||' '||v_first_name;\n\n     RETURN UPPER(v_ind_key);\n    END\n    ;\n$function$"
    )
    op.replace_entity(public_searchkey_individual)
    op.alter_column('parties', 'first_name_key',
               existing_type=sa.String(length=100),
               type_=sa.VARCHAR(length=50),
               existing_nullable=True)
    # ### end Alembic commands ###
