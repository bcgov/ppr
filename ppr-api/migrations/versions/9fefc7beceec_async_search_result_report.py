"""Async search result report.

Revision ID: 9fefc7beceec
Revises: 1fa4df7e1c7a
Create Date: 2021-12-09 18:28:27.279975

"""
from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_function import PGFunction
from sqlalchemy import text as sql_text
from sqlalchemy.schema import Sequence, CreateSequence, DropSequence  # Added manually.

# revision identifiers, used by Alembic.
revision = '9fefc7beceec'
down_revision = '1fa4df7e1c7a'
branch_labels = None
depends_on = None

# Changes to support async search result report tracking.
# Add event_tracking_types with data, event_tracking with sequence.
def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('search_results', sa.Column('callback_url', sa.String(length=1000), nullable=True))
    op.add_column('search_results', sa.Column('doc_storage_url', sa.String(length=1000), nullable=True))
    op.add_column('search_results', sa.Column('account_name', sa.String(length=1000), nullable=True))
    public_searchkey_aircraft = PGFunction(
        schema="public",
        signature="searchkey_aircraft(aircraft_number IN VARCHAR)",
        definition="RETURNS VARCHAR\n    LANGUAGE plpgsql\n    AS\n    $$\n    DECLARE\n        v_search_key VARCHAR(25);\n    BEGIN\n        v_search_key := TRIM(right(REGEXP_REPLACE(aircraft_number,'[^\\w]+','','gi'),6));\n        RETURN v_search_key;\n    END\n    ; \n    $$"
    )
    op.replace_entity(public_searchkey_aircraft)

    # Added manually
    op.execute(CreateSequence(Sequence('event_tracking_id_seq', start=1, increment=1)))

    event_tracking_types = op.create_table('event_tracking_types',
    sa.Column('event_tracking_type', sa.String(length=20), nullable=False),
    sa.Column('event_tracking_desc', sa.String(length=100), nullable=False),
    sa.PrimaryKeyConstraint('event_tracking_type')
    )
    op.create_table('event_tracking',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key_id', sa.Integer(), nullable=False),
    sa.Column('event_ts', sa.DateTime(), nullable=False),
    sa.Column('event_tracking_type', sa.String(length=20), nullable=False),
    sa.Column('status', sa.Integer(), nullable=True),
    sa.Column('message', sa.String(length=2000), nullable=True),
    sa.Column('email_address', sa.String(length=250), nullable=True),
    sa.ForeignKeyConstraint(['event_tracking_type'], ['event_tracking_types.event_tracking_type'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_event_tracking_event_tracking_type'), 'event_tracking', ['event_tracking_type'], unique=False)
    op.create_index(op.f('ix_event_tracking_event_ts'), 'event_tracking', ['event_ts'], unique=False)
    op.create_index(op.f('ix_event_tracking_key_id'), 'event_tracking', ['key_id'], unique=False)

    # Added manually
    op.bulk_insert(event_tracking_types,
      [
        { 'event_tracking_type': 'SEARCH_REPORT', 'event_tracking_desc': 'Search Detail large report generation and storage.' },
        { 'event_tracking_type': 'API_NOTIFICATION', 'event_tracking_desc': 'Notification by API callback of successful event outcome.' },
        { 'event_tracking_type': 'EMAIL', 'event_tracking_desc': 'Email notification.' },
        { 'event_tracking_type': 'SURFACE_MAIL', 'event_tracking_desc': 'Surface mail delivery of report to service provider.' },
        { 'event_tracking_type': 'EMAIL_REPORT', 'event_tracking_desc': 'Email delivery of report.' }
      ]
    )

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_searchkey_aircraft = PGFunction(
        schema="public",
        signature="searchkey_aircraft(aircraft_number character varying)",
        definition="returns character varying\n LANGUAGE plpgsql\nAS $function$\n    DECLARE\n        v_search_key VARCHAR(25);\n    BEGIN\n        v_search_key := TRIM(REGEXP_REPLACE(aircraft_number,'\\s|-','','gi'));\n        IF (LENGTH(v_search_key) > 6) THEN\n        v_search_key := RIGHT(v_search_key, 6);\n        END IF;\n        RETURN v_search_key;\n    END\n    ; \n    $function$"
    )
    op.replace_entity(public_searchkey_aircraft)
    op.drop_column('search_results', 'account_name')
    op.drop_column('search_results', 'doc_storage_url')
    op.drop_column('search_results', 'callback_url')

    op.drop_index(op.f('ix_event_tracking_key_id'), table_name='event_tracking')
    op.drop_index(op.f('ix_event_tracking_event_ts'), table_name='event_tracking')
    op.drop_index(op.f('ix_event_tracking_event_tracking_type'), table_name='event_tracking')
    op.drop_table('event_tracking')
    op.drop_table('event_tracking_types')

    # Added manually
    op.execute(DropSequence(Sequence('event_tracking_id_seq')))

    # ### end Alembic commands ###
